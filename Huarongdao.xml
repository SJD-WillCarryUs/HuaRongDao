<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

int position[20] ={ 2, 1, 1, 3, 2, 1, 1, 3, 7, 8, 9,10, 4, 6, 6, 5, 4, 0, 0, 5};</declaration><template><name x="5" y="5">Template</name><declaration>// Place local declarations here.
// Place local declarations here.

void move(int N,int i){
    int x = 0;
    int p=0;
    int t[1] = {1};
    while(position[p]!=N){
        p++;
        if(p==20){
            t[N];
}
    }
    x=p;

    if(i == 1){  //move left
        if(x%4==0){
            return;
        }

        if(N==2||N==3||N==4||N==5){    //the block is 2*1
            if(position[x-1]==0&amp;&amp;position[x+3]==0){
                position[x-1]=N;
                position[x+3]=N;
                position[x]=0;
                position[x+4]=0;
            }
        }
        else if (N==7||N==8||N==9||N==10)  // the block is 1*1
        {
            if(position[x-1]==0){
                position[x-1]=N;
                position[x]=0;
            }
        }
        else if (N==1)  // the block is 2*2
        {
            if(position[x-1]==0&amp;&amp;position[x+3]==0){
                position[x-1]=N;
                position[x+3]=N;
                position[x+1]=0;
                position[x+5]=0;
            }
        }
        else if (N==6)   // the block is 1*2
        {
            if(position[x-1]==0){
                position[x-1]=N;
                position[x+1]=0;
            }
        }   
    }
    
    else if (i==2) //move right
    {
        if(x%4==3){
            return;
        }
        if(N==2||N==3||N==4||N==5){    // the block is 2*1
            if(position[x+1]==0&amp;&amp;position[x+5]==0){
                position[x+1]=N;
                position[x+5]=N;
                position[x]=0;
                position[x+4]=0;
            }
        }
        else if (N==7||N==8||N==9||N==10)  // the block is 1*1
        {
            if(position[x+1]==0){
                position[x+1]=N;
                position[x]=0;
            }
        }
        else if (N==1)  // the block is 2*2
        {
            if((x+1)%3!=0){
                if(position[x+2]==0&amp;&amp;position[x+6]==0){
                    position[x+2]=N;
                    position[x+6]=N;
                    position[x]=0;
                    position[x+4]=0;
                }
            }
            
        }
        else if (N==6)  //  the block is 1*2
        {
            if((x+1)%4!=3){
                if(position[x+2]==0){
                    position[x+2]=N;
                    position[x]=0;
                }
            }
        }
    }

else if (i==3) //move up
    {
        if(x&lt;=3){
            return;
        }
        if(N==2||N==3||N==4||N==5){    // the block is 2*1
            if(position[x-4]==0){
                position[x-4]=N;
                position[x+4]=0;
            }
        }
        else if (N==7||N==8||N==9||N==10)  // the block is 1*1
        {
            if(position[x-4]==0){
                position[x-4]=N;
                position[x]=0;
            }
        }
        else if (N==1)  // the block is 2*2
        {
            if(position[x-4]==0&amp;&amp;position[x-3]==0){
                position[x-4]=N;
                position[x-3]=N;
                position[x+4]=0;
                position[x+5]=0;
            }
        }
        else if (N==6)  //  the block is 1*2
        {
            if(position[x-4]==0&amp;&amp;position[x-3]==0){
                position[x-4]=N;
                position[x-3]=N;
                position[x]=0;
                position[x+1]=0;
            }
        }
    }
    
else if (i==4) //move down
    {
        if(x&gt;=16){
            return;
        }
        if(N==2||N==3||N==4||N==5){    // the block is 2*1
            if(x&lt;12){
               if(position[x+8]==0){
                position[x+8]=N;
                position[x+4]=N;
                position[x]=0;
                }
            }
            
        }
        else if (N==10||N==7||N==8||N==9)  // the block is 1*1
        {
            if(position[x+4]==0){
                position[x+4]=N;
                position[x]=0;
            }
        }
        else if (N==1)  // the block is 2*2
        {
            if(x&lt;11){
                if(position[x+8]==0&amp;&amp;position[x+9]==0){
                    position[x+8]=N;
                    position[x+9]=N;
                    position[x]=0;
                    position[x+1]=0;
                }
            }
}    

        else if (N==6)  //  the block is 1*2
        {
            if(position[x+4]==0&amp;&amp;position[x+5]==0){
                position[x+4]=N;
                position[x+5]=N;
                position[x]=0;
                position[x+1]=0;
            }
        }
    }
}

int judge(){
    if(position[17]==1&amp;&amp;position[18]==1){
        return 1;
    }
    else{
        return 0;
    }
}
</declaration><location id="id0" x="-32" y="280"><name x="-42" y="250">finish_state</name></location><location id="id1" x="16" y="-40"><name x="6" y="-70">no_finish_state</name></location><init ref="id1"/><transition><source ref="id1"/><target ref="id0"/><label kind="guard" x="-68" y="90">judge()==1</label></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(10,4)</label><nail x="224" y="-96"/><nail x="128" y="40"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(10,3)</label><nail x="184" y="-88"/><nail x="112" y="32"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(10,2)</label><nail x="152" y="-80"/><nail x="96" y="16"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(10,1)</label><nail x="40" y="-40"/><nail x="136" y="-72"/><nail x="88" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(9,4)</label><nail x="120" y="-64"/><nail x="88" y="0"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(9,3)</label><nail x="104" y="-56"/><nail x="80" y="-8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(9,2)</label><nail x="88" y="-48"/><nail x="72" y="-16"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(9,1)</label><nail x="72" y="-48"/><nail x="64" y="-24"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(8,4)</label><nail x="16" y="-24"/><nail x="-152" y="176"/><nail x="-264" y="0"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(8,3)</label><nail x="-160" y="152"/><nail x="-248" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(8,2)</label><nail x="-160" y="128"/><nail x="-232" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(8,1)</label><nail x="-160" y="104"/><nail x="-224" y="16"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(7,4)</label><nail x="-160" y="80"/><nail x="-208" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(7,3)</label><nail x="-160" y="64"/><nail x="-192" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(7,2)</label><nail x="-160" y="40"/><nail x="-184" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(7,1)</label><nail x="-160" y="24"/><nail x="-176" y="8"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(6,4)</label><nail x="176" y="136"/><nail x="8" y="208"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(6,3)</label><nail x="152" y="128"/><nail x="16" y="192"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(6,2)</label><nail x="128" y="128"/><nail x="16" y="176"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(6,1)</label><nail x="104" y="120"/><nail x="24" y="160"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(5,4)</label><nail x="96" y="120"/><nail x="24" y="152"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(5,3)</label><nail x="80" y="120"/><nail x="32" y="144"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(5,2)</label><nail x="64" y="112"/><nail x="32" y="128"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(5,1)</label><nail x="48" y="104"/><nail x="32" y="112"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(4,4)</label><nail x="88" y="-352"/><nail x="280" y="-128"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(4,3)</label><nail x="96" y="-304"/><nail x="240" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(4,2)</label><nail x="96" y="-272"/><nail x="216" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(3,5)</label><nail x="96" y="-240"/><nail x="184" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(3,4)</label><nail x="96" y="-208"/><nail x="160" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(3,3)</label><nail x="96" y="-184"/><nail x="144" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="4" y="-126">judge()==0</label><label kind="assignment" x="4" y="-96">move(3,2)</label><nail x="96" y="-168"/><nail x="128" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="4" y="-126">judge()==0</label><label kind="assignment" x="4" y="-96">move(3,1)</label><nail x="96" y="-152"/><nail x="112" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(2,4)</label><nail x="-336" y="-120"/><nail x="-96" y="-400"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(2,3)</label><nail x="-272" y="-104"/><nail x="-80" y="-336"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(2,2)</label><nail x="-216" y="-88"/><nail x="-64" y="-280"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(2,1)</label><nail x="-152" y="-72"/><nail x="-48" y="-224"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(1,4)</label><nail x="-112" y="-64"/><nail x="-32" y="-176"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(1,2)</label><nail x="0" y="-40"/><nail x="-72" y="-64"/><nail x="-24" y="-136"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(1,3)</label><nail x="-48" y="-64"/><nail x="-16" y="-112"/></transition><transition><source ref="id1"/><target ref="id1"/><label kind="guard" x="-44" y="-70">judge()==0</label><label kind="assignment" x="-44" y="-40">move(1,1)</label><nail x="-32" y="-64"/><nail x="-16" y="-88"/></transition></template><system>// Place template instantiations here.
Process = Template();

// List one or more processes to be composed into a system.
system Process;</system></nta>